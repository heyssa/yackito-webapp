# This references the default nodejs container from
# the Docker Hub: https://registry.hub.docker.com/_/node/
# If you want Nodesource's container you would reference nodesource/node
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: node
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # A step that executes `npm install` command
    - npm-install
    # A step that executes `npm test` command
    - npm-test

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: echo nodejs information
        code: |
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"

# Take our tested application revision and its dependencies, bake it in to a
    # Docker image, and push to GCR.
    - internal/docker-push:
        entrypoint: bin/get_ip
        cmd: 0.0.0.0 8080
        working-dir: $WERCKER_ROOT
        tag: $WERCKER_GIT_COMMIT
        ports: "8080"
        username: _json_key
        password: $GCP_KEY_JSON
        repository: $GCR_TAG
        registry: $GCR_HOST/v2

deploy-to-kubernetes:
    box: node
    steps:

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template


    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes
    # Since we're using GKE, we'll use a fork of the kubectl step that supports
    # GKE service account authentication. We need to pass some GKE specific configuration
    # to ensure we can authenticate, then point kubectl at the directory containing our
    # Kubernetes configuration.

    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - riceo/kubectl:
        name: deploy to kubernetes
        server: $KUBERNETES_MASTER
        gcloud-key-json: $GCP_KEY_JSON
        gke-cluster-name: $GKE_CLUSTER_NAME
        gke-cluster-zone: $GKE_CLUSTER_ZONE
        gke-cluster-project: $GKE_CLUSTER_PROJECT
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/